import base64

def decode_base64_to_image(base64_string, output_path):
    image_data = base64.b64decode(base64_string)
    with open(output_path, "wb") as output_file:
        output_file.write(image_data)

# Вставь строку из Postman
binary_base64 = "iVBORw0KGgoAAAANSUhEUgAAAOsAAADXCAAAAADe2fnfAAANjUlEQVR4AdXBCYLaWgLAQOn+h9Zgsz1v4G7In6TK+AEh/lnGaxI3Mol/lfGKTGIiV/GPMl6QqwC5iX+UcUxuAuQu/k3GMbkKkIf4NxmH5C6Qu/hHGYfkJkCuAuOfZBySmwC5CSH+QcYhuQmQWYAQ/yDjkMxiIpO4EIh/j3FIZjGRSVwIxL/HOCSzmMgkLgTi32MckknM5CImchH/HOOQTGImxJVcxD/HOCSTmEncCcQ/xzgmEHfGjUD8c4xjAnFn3AjEP8c4JhBbAvHPMY4JxJZAXAjxzzBeEGJLIJBZ/COMF8zYIRByFf8G4wWJPZIhV/GfkLX4EeMFiT0SyE38WfJKnGW8YhyTq/hj5JQ4w3jFOCZX8UfIT8Rbxu/JLL5Ofi7eMD4gk/gu+aV4yfiEXMQXySfiBeMjAvEt8rE4ZHxGiO+Qr4gDxmfM+Ab5lthn/BXki2KX8ReQL4sdxv+ffF1sGf9v8ifEhvF/Jn9GrBm/YHyLvBYgvxErxi8YM4nPyKF4kj0xk32xZPyCMZP4iOyLJdmIBdmKBeMDEiDxO7InNmQlNmQjRsbHJH5F9sSWLMQuWYmR8TEhfkF2xA5ZiCOyFAPjcxI/J1uxS0ZxTJbiyfg/ka3YJ4PYEOJKluLB+D+RjTggg1iSSdzIUtwZF3IX/xHZiCPyFAtyFXeyEHcGshT/AdmII/IQA3mIB1mIG5O1+PNkJV6Qh3iQQTzJQlyZrMWfJ0vJINbkJm5kIQYyiivZEX+anBAPchMzWYuRjGIme+IPk7PiQu7iQkYhECMZxUz2xR8lP5NcxYU8BQjEgoxiIgfiD5KVeJIX4kIe4kIgLmQSIKOYmOyLP0cGsU92xESuYiYLcSGjuDDZF3+ODOKQrMVEJnEjo5jIKC4MORJ/iDwlySBGshATgXiQUUxkFBcGciT+DBklV3EncSeDmBkDGcVMRgHGRPbFCQLxA3IsJBZkEFsyipmMAoyBbMRbQvyELMWTsSVPcUwuYiajAGNJluItuYjzZCHWjCV5iiMyiZmMAowNWYhXBOJnZBRbAjGQQeyTi7iShcDYIaM4JMSPySBW5C5mshF75CKuZCEwdslTHBICZBInyVMsySgmshFbMokrWQiMfXIX+wzjQm7iHHmIJVkKkJCV2JBJXMlCYByQh9hlXMhTnCJ3sSAbgYFsxIpM4koWAuOQ3MUOA2QhTpC7WJAdcWHIWizIJG5kITCOyVXsMEBW4i15iJHsiZlsxUgmcSMLgfGKTGLLQLbiDXmIXTKKmYSsxZNM4kqWAuMlmcWSAbIjjggBchdHZBBXsiPuZBZXshLGOwKxJMm+OCCEPMWKxI08xI3siBuZxI2shPGWEBtyIPYJyVPsMWZyF3eyI65kEleyFsYpxp1JyKHYIyvxktzEk2zFRGYxk40wfsxAXogtWYk35CoGshU3QkxkK4wfM+SlWJO1eEdmMZKtWJIdYfyUgbwWS7IWb8kslmQjRrInjB8ykDdiSdbiPZnEimzEg+wL4+fkrViQlThBJrEmG3ElV8lKGD8n78VIluIEmcWGbATIC2H8nJwQA1mIEwy5iC35sTB+Ts6IgQziDEMgdskPhfFzckoMZBYHBGJFIPbJz4TxC3JKPMkk9slVDEwgY5dcJWeE8QtyTjzIRewzM4EYCWHsk1nICWH8hpwSDwJxRCCEGMlFHJJJICuBLITxK3JGnCKzhFgwSeKACYQsBchCGL8jJ8QZchUYCyZJHDEhQK4CYyILYfyOnBBnCIFMYmQmkLHPBAKZxYMshPFL8l7sk3gQCISMLYE4JEmATAIkLmQQGL8lb8UegbiTi0AyY0MgjkggAXIRDzIIjF+Tt2JDJnEjC7EhEGfIRdzJIDB+T96JNZnFjYxiyZBJHDLAALmIOxkExgfkrViQq7iRUazJLM4QiBsZBcYn5K0YyE3cyCjWZBYvSFwJxJWMAuMj8k4M5C5mMooNuYklGcSVQFzJIMD4jLwRT/IQMxnFhtzFSEZxI8SVDAKMD8lLMZCHmMkgNuQhHmQtboSYyCjA+JS8Ek8yiIk8xYYM4sKQrbgRYiKjAONj8kI8ySBm8hBbMoiJ7IgbITBZCDA+J4diIIO4EpKL2JJBXMi+wLgQQlYCjC+QIzGQUVyZXMQOeYqJMZOluBFCluLC+AI5EgNZiInMYoc8xYY8xZ2ELMWF8Q2yL0ayEFdC7JBB7JG7DAwQSBbiwvgK2RUjWYqXZBC75CEwQCAZxcT4DtkTC7IUL8hTHJGrDIwLWYuJ8R2yJxZkKQ7JKIx9MkvCuJC1mBhfIjtiSZbikDyEcURmYRITWYqZ8S2yFUuyEofkKY7JRWASBrIUM+NbZCuWZClekJsQiH1yESCEgSzFzPga2YgFWYqXZJbMYp9AgEwCWYgr42tkIxZkKd4QCCGE2CXEhSQQshBXxvfIWizIQrwlCQRI7BLiQpKLZBQ3xhfJSoxkIU4RCJDYJTGTWTKKG+OLZCVGshBnyCSE2CUxkx1xZ3yTLMVIFuIMeYhdxpWQLMWD8VWyECMZxSlyF2/IVjwY3yWjGMkozpGbeEM24sn4LhnFggziJJkFxguyEQPjq2QpRjKIU0xm8ZpsxcD4IlmLBXmKc2QWGC/IRoyM75GNWJKHOEUSiEPGhWzEgvEtsiNW5C7OkYuQ2GVcyEYsGV8ie2JNbuIcIYF4QTZixfgKORAbMotT5Cr2mSEbsWZ8gxyJHXIRp8gs9pkhG7FhfIEcih0yiVME4pAhG7FlfE5eiDWTSZxgAvGKrMUO42PySqyZTOIEmcQBQ9Zil/EpeS1WTGZxgkxinyFLccD4kLwRS0IyifdkFnsMZBTHjM/IO7EkD/GG3MSWhNzFO8Zn5K1YkId4Te5in9zEW8ZHZCNABrEgT/GKTBJin9zEe8YnZC2u5ClG8hQvCYEQu+QmTjA+IStxJw8xkFG8J8QOeYgTjF+SHfEgDzGQUbxhILFD7uIM4xdkXzzIIJ7kKpnEe8YOuYtTjB+Ql+JJBvEkN8kkfkce4hTjJHkrHmQUT3IXchHvyEXcGRdyl8QJxglyRjzIQjzJQ4AQb8hCTGQQJxhvyTlxJyvxIE9xIfGSLMVEHpJ4z3hNTos7SUbxIIMAgTgmK3EhozjBeEF+Iq4EklE8yChALuKArMWFDOIM45Ccl0BMhJCFeJClkFnskbWYyFOcYhyRHwsQCGQhHmQpZBYTM+5kKy7kKc4xDshLgWyEXASyEA9yLEayIybyECcZ++QpWYmJ7Eo24kneSo7EhTzEWcYueQpZiDvZkWzEk3wgJnITDwLxgrFHnkJGMZJz4kleSF6IiUzCuJOrmBkbxh55CnmKJTknBnIkQA7FTCYxkKtAILaMPfIU8hRLclIMZFdM5EgckZXYMHbIIOQhVuSkGMlW3MhCMotjJqPYMnbIQ4DcxYacFAuyEAMZxCkyiB3GDnkIkLvYkLNiSW5iQ27iHePCQK7iSeLG2CEPAXIXa0JCzGQleYifkIt4R4gbuYo7gbgxdshTgNzFipDEjSwkg/gDJCayKx6MHfIUIA+xZEI8yVPIKL7JwCRuZEfcGTvkKUCeYkkgnuQhLmQQ3yIQFxJXshILxg4ZhQxiYEKM5C4mMoiPyCguhLiSlTAejB0yChnEkyTESG5iJqP4gCwFCHElJKMYGDtkIWQUDybEgtzETBbit2QpLoS4MeQpFow98lpcCUksyE3MZCV+Q9biQogbk1GMjD3yTkgyiwW5i5msxU/JVlwIcSNLMTL2yBuZ3MWC3MVM9sRpsisuhLiTp1gxdslPxEiukpjJGbFDjgUIxJ0MYsnYJQfiQpZiJA9xJX9CgBAPMoqJXAQY+2RP3MkonuQuHuQPCATiTo6FcUA2YiCjeJCHeJCvCxCIO9kXE+OILMWCLMSdPMWN/ERyQoBAPMiumBjH5ClWZClmMoo7OS9u5IUAgXiQXTEzXpKL2CNrIUsxklNih6wFJsSD7Ikr47fkhBjIUrIjdslSgFzEg+yJK+PX5IQYyEKyIw7IIJBJPMlGPBi/JmfEQAbJjjgmdyFX8SQb8WD8mpwRC3IXshWvyE1yFU+ykXFn/J6cEgO5S3bEK7ISA3mKDeMDckbMZBYCya54TRZiJLPYZ3xAvizekUGMZBYHjE/IV8UJchcLMosDxkfki+ITMosjxmdkK+QmkJPiIzKLI8aHZCUmBhgXck58RGZxxPiQrMSSnBOfkUkcMj4lC7EgZ8VHZBaHjM/JKEZyKEDu4iNyFYeML5CnWJBdcSNX8RmZxTHjG+QpRrIjnmQSn5GrOGZ8hYwyORYDuYjPyE0cM75BzosFuYjPyE0cM75BzosFgfiM3MUx4wvkvFgS4kNyF8eMz8kPxIIQn5KHOGR8Tn4gRkJ8TB7ikPEx+ZF4kvgGuYtDxsfkZ+JO4ivkIY4Yn5KfipnEt8hdHDE+Jb8VXyN3ccT4kPxSfJPcxBHjQ/Ib8WVyE0eMD8kgOSO+Tm7iiPEhORYXshR/hMzikPEhWQh5iP+QTOKQ8SE5FP8tiReMD8mh+KsYH5Ij8XcxPiRH4u9ifEr2xV/G+JTsi7+M8THZE38b42OyI/46xudkK/46xjfISvx9jK+QUfyNjC+Ru/g7Gd8jEH+t/wGukllM8TjXcwAAAABJRU5ErkJggg=="

# Декодируем и сохраняем
decode_base64_to_image(binary_base64, ".testing/binary_result.png")

print("✅ Бинаризованное изображение сохранено как binary_result.png")
